type Factory @entity {
  id: Bytes!
  pools: [Pool!] @derivedFrom(field: "factory")
}

type Pool @entity {
  id: Bytes!
  address: Bytes!
  factory: Factory!
  name: String!
  symbol: String!
  totalShares: BigDecimal!
  swapFee: BigDecimal!
  isInitialized: Boolean!
  weights: [BigDecimal!]!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  swapsCount: BigInt!
  holdersCount: BigInt!

  tokens: [PoolToken!]! @derivedFrom(field: "pool")
  snapshots: [PoolSnapshot!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
}

type PoolToken @entity {
  id: Bytes!
  pool: Pool!
  token: Token!
  name: String!
  symbol: String!
  decimals: Int!
  address: Bytes!
  balance: BigDecimal!
  volume: BigDecimal!
  surplus: BigDecimal!
  swapFee: BigDecimal!
  weight: BigDecimal!
  index: Int!
}

type Token @entity {
  id: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
  address: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  pool: Pool!
  tokenIn: Bytes!
  tokenInSymbol: String!
  tokenOutSymbol: String!
  tokenAmountOut: BigDecimal!
  expectedAmountOut: BigDecimal
  tokenOut: Bytes!
  tokenAmountIn: BigDecimal!
  swapFeeToken: Bytes
  swapFeeAmount: BigDecimal
  surplusToken: Bytes
  surplusAmount: BigDecimal
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

enum InvestType {
  Add
  Remove
}

type AddRemove @entity(immutable: true) {
  id: Bytes!
  type: InvestType!
  sender: Bytes!
  amounts: [BigDecimal!]!
  pool: Pool!
  user: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type PoolShare @entity {
  id: Bytes!
  pool: Pool!
  user: User!
  balance: BigDecimal!
}

type PoolSnapshot @entity {
  id: Bytes!
  pool: Pool!
  timestamp: Int!
  totalShares: BigDecimal!
  swapsCount: BigInt!
  holdersCount: BigInt!
  balances: [BigDecimal!]!
  totalSwapFees: [BigDecimal!]!
  totalSurpluses: [BigDecimal!]!
  totalSwapVolumes: [BigDecimal!]!
}

type User @entity {
  id: Bytes!
  swaps: [Swap!] @derivedFrom(field: "user")
  shares: [PoolShare!] @derivedFrom(field: "user")
  addRemoves: [AddRemove!] @derivedFrom(field: "user")
}
